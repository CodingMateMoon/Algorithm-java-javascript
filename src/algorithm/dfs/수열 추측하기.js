/*
수열 추측하기
가장 윗줄에 1부터 N까지의 숫자가 한 개씩 적혀 있다. 그리고 둘째 줄부터 차례대로 파스칼
의 삼각형처럼 위의 두개를 더한 값이 저장되게 된다. 예를 들어 N이 4 이고 가장 윗 줄에 3
1 2 4 가 있다고 했을 때, 다음과 같은 삼각형이 그려진다.
3 1 2 4
4 3 6
7 9
16
N과 가장 밑에 있는 숫자가 주어져 있을 때 가장 윗줄에 있는 숫자를 구하는 프로그램을 작성하
시오. 단, 답이 여러가지가 나오는 경우에는 사전순으로 가장 앞에 오는 것을 출력하여야 한다.
▣ 입력설명
첫째 줄에 두개의 정수 N(1≤N≤10)과 F가 주어진다. N은 가장 윗줄에 있는 숫자의 개수를 의
미하며 F는 가장 밑에 줄에 있는 수로 1,000,000 이하이다.
▣ 출력설명
첫째 줄에 삼각형에서 가장 위에 들어갈 N개의 숫자를 빈 칸을 사이에 두고 출력한다. 답이 존재
하지 않는 경우는 입력으로 주어지지 않는다.
▣ 입력예제 1
4 16
▣ 출력예제 1
3 1 2 4
 */

function solution(n){
    
}

/*

가장 윗줄에 있는 숫자의 개수 N : 4,  가장 밑에 줄에 있는 수 F : 16 이고 파스칼의 삼각형처럼 위의 두개를 더한 값이 저장된다고 할 때 가장 밑에 줄에 있는 수부터 시작해서 16, 7 9 , 4 3 6, 3 1 2 4 와 같이 두 개를 더한 값이 아래쪽의 수와 같은 경우의 수를 구합니다.
가장 밑에줄에 있는 수가 16일때를 기준으로 1, 15 / 2 14 / 3 13 / 4 16 등이 있고
1 15의 경우 두 개의 정수로 더해서 1이 될 수 없으므로 더 이상 구할 수 있는 경우가 존재하지 않습니다.  2 14 역시 마찬가지입니다. 3 13의 경우  3의 경우는 1 2 , 13의 경우는 1 12 / 2 11 등으로 나누어질 수 있습니다.
Level이 1부터 시작해서 N = 4 가 되었을 때까지 1 이상의 정수로 구성된 수가 나올 경우 종료합니다.
dfs(1, 16) = dfs(L, F) = dfs(L-1, x) + dfs(L-1, F - x) [ 1 <= x <= F - 1 ]
답이 여러가지가 나오는 경우에는 사전순으로 가장 앞에 오는 것을 출력하여야 하므로 F = 16일때 7 9 / 9 7 이 있는 경우 7 9가 우선적으로 선택됩니다. 따라서 x <= y로 설정하고 x == y 일 경우 모든 경우의 수를 구했다고 판단할 수 있습니다. 1, 15 / 2, 14와 같이 1 또는 2가 나오는 경우 두 수의 합이 1, 2가 될 수 없고 더이상 구할 수 없으므로 종료합니다.  if( x <= 2) return; if (x <= 2 && L === N) 인 경우 답을 만족시키므로 해당 값을 출력합니다. dfs(1,16) =  dfs(2,7) + dfs(2,9) = dfs(3,4) + dfs(3,3)  + dfs(3, 6) = dfs(4, 3) + dfs(4, 1) + dfs(4,2) + dfs(4,4)
dy[x][y] 에 부분 결과값들을 저장하는데 1<= x <= 500000, 1 <= y <= 1000000 입니다.
dfs(1, 1) , dy[1][1] / dfs(2, 1) = dy[2][1], dfs(2, 2) = dy[2][2]
dy[1][1] = dy[2][1] + dy[2][2]

 */